name: Build and Push Full Stack Docker Images

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: day-planner-frontend
  BACKEND_IMAGE_NAME: day-planner-backend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.deploy_environment }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Checkout backend repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/day-planner-backend
          path: backend
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract frontend metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.deploy_environment }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push frontend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

  generate-attestations:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    permissions:
      attestations: write
      id-token: write
      packages: write
      
    steps:
      - name: Generate backend attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}
          subject-digest: ${{ needs.build-backend.outputs.image-digest }}
          push-to-registry: true

      - name: Generate frontend attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}
          subject-digest: ${{ needs.build-frontend.outputs.image-digest }}
          push-to-registry: true

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, generate-attestations]
    if: success()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Day Planner Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Successfully built and pushed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: \`${{ needs.build-backend.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend App**: \`${{ needs.build-frontend.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Organization: \`${{ github.repository_owner }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”§ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Pull images: \`docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy using docker-compose or your preferred orchestration tool" >> $GITHUB_STEP_SUMMARY
          echo "3. Update environment variables and secrets as needed" >> $GITHUB_STEP_SUMMARY
