# Day Planner Production Environment Configuration
# Copy this file to .env.production and update the values

# =============================================================================
# REQUIRED CONFIGURATION - These MUST be set for production deployment
# =============================================================================

# API Configuration (CRITICAL - Frontend won't work without this)
# Update this to point to your production backend API
VITE_API_BASE_URL=https://api.your-domain.com/api

# GitHub Container Registry Configuration
GITHUB_USERNAME=your-github-username

# Google OAuth 2.0 Configuration (Required)
# Get these from Google Cloud Console: https://console.cloud.google.com/
# Create OAuth 2.0 Client ID for web application
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# JWT Configuration (Required)
# Generate a strong random secret (minimum 32 characters)
# You can use: openssl rand -base64 32
JWT_SECRET=your-super-secure-jwt-secret-key-minimum-32-chars
JWT_EXPIRES_IN=7d

# Session Configuration (Required)
# Generate a strong random secret (minimum 32 characters)
# You can use: openssl rand -base64 32
SESSION_SECRET=your-super-secure-session-secret-key-minimum-32-chars

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# Domain Configuration
DOMAIN=your-domain.com
FRONTEND_URL=https://your-domain.com
API_BASE_URL=https://api.your-domain.com/api

# Port Configuration (for development/local deployment)
FRONTEND_PORT=4173
BACKEND_PORT=3001

# Container Image Tags
FRONTEND_TAG=latest
BACKEND_TAG=latest

# Data Storage Path (local deployment)
DATA_PATH=./data

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# LibSQL Configuration (for Turso or remote databases)
# Leave empty for local SQLite file
LIBSQL_URL=
LIBSQL_AUTH_TOKEN=

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# SSL/TLS Configuration (for Traefik)
ACME_EMAIL=your-email@domain.com

# Analytics and Monitoring
ANALYTICS_ID=
SENTRY_DSN=

# Grafana Configuration (if using monitoring)
GRAFANA_PASSWORD=your-secure-grafana-password

# =============================================================================
# DEVELOPMENT/STAGING OVERRIDES
# =============================================================================

# Uncomment and modify for staging environment
# FRONTEND_URL=https://staging.your-domain.com
# API_BASE_URL=https://staging-api.your-domain.com/api
# DOMAIN=staging.your-domain.com

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. NEVER commit this file with real values to version control
# 2. Use strong, unique secrets for JWT_SECRET and SESSION_SECRET
# 3. Ensure Google OAuth client is configured with correct redirect URIs
# 4. For production, consider using Docker secrets or external secret management
# 5. Regularly rotate secrets and tokens
# 6. Use HTTPS in production (configure reverse proxy accordingly)

# =============================================================================
# QUICK SETUP COMMANDS
# =============================================================================

# Generate JWT secret:
# openssl rand -base64 32

# Generate session secret:
# openssl rand -base64 32

# Deploy with this configuration:
# docker-compose -f docker-compose.prod.yml --env-file .env.production up -d

# Check deployment status:
# docker-compose -f docker-compose.prod.yml ps

# View logs:
# docker-compose -f docker-compose.prod.yml logs -f

# Backup database:
# docker-compose -f docker-compose.prod.yml --profile backup run --rm backup

# Stop deployment:
# docker-compose -f docker-compose.prod.yml down

